*********************************************************************
*********************** Section 10: API Security ********************

********************************************************************
********************* 61. Review Model & Get Review ****************
-- /routes/reviews.js
        const router = express.Router({ mergeParams: true });

-- /routes/Bootcamps.js: 
        router.use('/:bootcampId/reviews', reviewRouter);


********************************************************************
********************* 62. Get single review & Update Seeder ********
-- /controller/reviews.js:
@route  GET /api/v1/reviews
exports.getReview = asyncHandler( async (req, res, next) => {

    const review = await (await Review.findById(req.params.id)).populate({
        path: 'bootcamp',
        select: 'name description'
    })
    --> get review with the related bootcamp
    ...
})


********************************************************************
********************* 63. Add Review For Bootcamp ******************
-- 1 Person can write only one review for a given Bootcamp:
    -- /models/Review.js
        ReviewSchema.index({ bootcamp: 1, user: 1}, { unique: true });
    -- /controller/reviews.js:  
    exports.addReview = asyncHandler( async (req, res, next) => {

    // Store bootcamp id and user id get from request  
    req.body.bootcamp = req.params.bootcampId;
    req.body.user = req.user.id;

    const bootcamp = await Bootcamp.findById(req.params.bootcampId);

    if(!bootcamp) {
        return next(new ErrorResponse(`No bootcamp ${req.params.bootcampId}`, 404));
    }

    const review = await Review.create(req.body);

    res.status(201).json({ 
        success: true,
        data: review
    
    })
});




********************************************************************
********************* 64. Aggregate - Calculate Average Rating *****
-- /model/Review.js:

    // Static method to get avg of rating and save
        ReviewSchema.statics.getAverageRating = async function(bootcampId) {
            const obj = await this.aggregate([
                {
                    $match: { bootcamp: bootcampId }
                },
                {
                    $group: {
                        _id: '$bootcamp',
                        averageRating: { $avg: '$rating' }
                    }
                }
            ]);
            // putting averageRating to the database
            try {
                
                await this.model('Bootcamp').findByIdAndUpdate(bootcampId, {
                    averageRating: obj[0].averageRating
                });

            } catch (error) {
                console.log(error);
            }
        }

        // Call getAverageRating after save
        ReviewSchema.post('save', function() {
            this.constructor.getAverageRating(this.bootcamp);
        });

        // Call getAverageRating before remove
        ReviewSchema.pre('save', function() {
            this.constructor.getAverageRating(this.bootcamp);
        });


********************************************************************
********************* 65. Update & Delete Review *******************
-- /controller/review.js:
        exports.updateReview = asyncHandler( async (req, res, next) => {

            let review = await Review.findById(req.params.id);

            if(!review) {
                return next(new ErrorResponse('..', 404));
            }

            review = await Review.findByIdAndUpdate(req.params.id, req.body, {
                new: true,
                runValidators: true
            })    

            res.status(200).json({ success: true, data: review})

        })

        exports.deleteReview = asyncHandler( async (req, res, next) => {

            const review = await Review.findById(req.params.id);

            if (!review) {
                return next(new ErrorResponse('', 404))
            }

            await Review.remove;

            res.status(200).json({ success: true, data: {}});

        })